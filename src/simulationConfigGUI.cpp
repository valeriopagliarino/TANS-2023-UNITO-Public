/*
*   Tecniche di Analisi Numerica e Simulazione
*   Dipartimento di Fisica - Universit√† degli Studi di Torino 
*   Authors: Enrica Bergalla e Valerio Pagliarino
*   Title: Software di simulazione Monte Carlo e ricostruzione di vertici 
*   Date: December 2022 - Licenza Creative Commons CC BY-SA 3.0 IT
*/

#include "../inc/simulationConfig.h"

//_________________________________________________________________________________
simulationConfigForm::simulationConfigForm(const TGWindow *p,UInt_t w,UInt_t h)
{
    std::cerr << "\n\nSimulation configuration: GUI started.";
    
   //BEGIN HERE CODE GENERATED BY THE TGuiBuilder

   // main frame
   TGMainFrame *fMainFrame3430 = new TGMainFrame(gClient->GetRoot(),10,10,kMainFrame | kVerticalFrame);
   fMainFrame3430->SetName("fMainFrame3430");
   fMainFrame3430->SetLayoutBroken(kTRUE);

   // composite frame
   TGCompositeFrame *fMainFrame2284 = new TGCompositeFrame(fMainFrame3430,813,687,kVerticalFrame);
   fMainFrame2284->SetName("fMainFrame2284");
   fMainFrame2284->SetLayoutBroken(kTRUE);

   TGFont *ufont;         // will reflect user font changes
   ufont = gClient->GetFont("-*-fixed-bold-r-*-*-13-*-*-*-*-*-*-*");

   TGGC   *uGC;           // will reflect user GC changes
   // graphics context changes
   GCValues_t vall657;
   vall657.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall657.fForeground);
   gClient->GetColorByName("#e8e8e8",vall657.fBackground);
   vall657.fFillStyle = kFillSolid;
   vall657.fFont = ufont->GetFontHandle();
   vall657.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall657, kTRUE);
   TGLabel *fLabel657 = new TGLabel(fMainFrame2284,"Configuration file generator for Monte Carlo simulation",uGC->GetGC(),ufont->GetFontStruct());
   fLabel657->SetTextJustify(36);
   fLabel657->SetMargins(0,0,0,0);
   fLabel657->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel657, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel657->MoveResize(0,0,424,24);
   TGLabel *fLabel658 = new TGLabel(fMainFrame2284,"Fast Monte Carlo simulation of high-momentum particles through a silicon tracker");
   fLabel658->SetTextJustify(36);
   fLabel658->SetMargins(0,0,0,0);
   fLabel658->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel658, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel658->MoveResize(2,26,456,22);
   TGHorizontal3DLine *fHorizontal3DLine734 = new TGHorizontal3DLine(fMainFrame2284,808,8);
   fHorizontal3DLine734->SetName("fHorizontal3DLine734");
   fMainFrame2284->AddFrame(fHorizontal3DLine734, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fHorizontal3DLine734->MoveResize(0,48,808,8);
   TGLabel *fLabel660 = new TGLabel(fMainFrame2284,"T.A.N.S. 2022-23 (E. Bergalla, V. Pagliarino)");
   fLabel660->SetTextJustify(36);
   fLabel660->SetMargins(0,0,0,0);
   fLabel660->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel660, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel660->MoveResize(552,8,256,16);

   ufont = gClient->GetFont("-*-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1");

   // graphics context changes
   GCValues_t valEntry661;
   valEntry661.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",valEntry661.fForeground);
   gClient->GetColorByName("#e8e8e8",valEntry661.fBackground);
   valEntry661.fFillStyle = kFillSolid;
   valEntry661.fFont = ufont->GetFontHandle();
   valEntry661.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&valEntry661, kTRUE);
   fTextEntry661 = new TGTextEntry(fMainFrame2284, new TGTextBuffer(31),-1,uGC->GetGC(),ufont->GetFontStruct(),kSunkenFrame | kOwnBackground);
   fTextEntry661->SetMaxLength(4096);
   fTextEntry661->SetAlignment(kTextLeft);
   fTextEntry661->SetText("./inputData.root");
   fTextEntry661->Resize(208,fTextEntry661->GetDefaultHeight());
   fMainFrame2284->AddFrame(fTextEntry661, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fTextEntry661->MoveResize(168,61,208,20);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall662;
   vall662.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall662.fForeground);
   gClient->GetColorByName("#e8e8e8",vall662.fBackground);
   vall662.fFillStyle = kFillSolid;
   vall662.fFont = ufont->GetFontHandle();
   vall662.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall662, kTRUE);
   TGLabel *fLabel662 = new TGLabel(fMainFrame2284,"Input simulation file path:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel662->SetTextJustify(33);
   fLabel662->SetMargins(0,0,0,0);
   fLabel662->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel662, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel662->MoveResize(4,64,160,16);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall663;
   vall663.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall663.fForeground);
   gClient->GetColorByName("#e8e8e8",vall663.fBackground);
   vall663.fFillStyle = kFillSolid;
   vall663.fFont = ufont->GetFontHandle();
   vall663.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall663, kTRUE);
   TGLabel *fLabel663 = new TGLabel(fMainFrame2284,"Output sim. file path:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel663->SetTextJustify(33);
   fLabel663->SetMargins(0,0,0,0);
   fLabel663->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel663, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel663->MoveResize(4,89,144,16);

   ufont = gClient->GetFont("-*-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1");

   // graphics context changes
   GCValues_t valEntry664;
   valEntry664.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",valEntry664.fForeground);
   gClient->GetColorByName("#e8e8e8",valEntry664.fBackground);
   valEntry664.fFillStyle = kFillSolid;
   valEntry664.fFont = ufont->GetFontHandle();
   valEntry664.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&valEntry664, kTRUE);
   fTextEntry664 = new TGTextEntry(fMainFrame2284, new TGTextBuffer(31),-1,uGC->GetGC(),ufont->GetFontStruct(),kSunkenFrame | kOwnBackground);
   fTextEntry664->SetMaxLength(4096);
   fTextEntry664->SetAlignment(kTextLeft);
   fTextEntry664->SetText("./simulationOutput.root");
   fTextEntry664->Resize(208,fTextEntry664->GetDefaultHeight());
   fMainFrame2284->AddFrame(fTextEntry664, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fTextEntry664->MoveResize(168,86,208,20);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall665;
   vall665.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall665.fForeground);
   gClient->GetColorByName("#e8e8e8",vall665.fBackground);
   vall665.fFillStyle = kFillSolid;
   vall665.fFont = ufont->GetFontHandle();
   vall665.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall665, kTRUE);
   TGLabel *fLabel665 = new TGLabel(fMainFrame2284,"Configuration file path:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel665->SetTextJustify(33);
   fLabel665->SetMargins(0,0,0,0);
   fLabel665->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel665, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel665->MoveResize(4,114,152,16);

   ufont = gClient->GetFont("-*-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1");

   // graphics context changes
   GCValues_t valEntry666;
   valEntry666.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",valEntry666.fForeground);
   gClient->GetColorByName("#e8e8e8",valEntry666.fBackground);
   valEntry666.fFillStyle = kFillSolid;
   valEntry666.fFont = ufont->GetFontHandle();
   valEntry666.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&valEntry666, kTRUE);
   configFilePath = new TGTextEntry(fMainFrame2284, new TGTextBuffer(31),-1,uGC->GetGC(),ufont->GetFontStruct(),kSunkenFrame | kOwnBackground);
   configFilePath->SetMaxLength(4096);
   configFilePath->SetAlignment(kTextLeft);
   configFilePath->SetText("./simulationConfig.txt");
   configFilePath->Resize(208,configFilePath->GetDefaultHeight());
   fMainFrame2284->AddFrame(configFilePath, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   configFilePath->MoveResize(168,111,208,20);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall667;
   vall667.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall667.fForeground);
   gClient->GetColorByName("#e8e8e8",vall667.fBackground);
   vall667.fFillStyle = kFillSolid;
   vall667.fFont = ufont->GetFontHandle();
   vall667.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall667, kTRUE);
   TGLabel *fLabel667 = new TGLabel(fMainFrame2284,"Number of events:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel667->SetTextJustify(33);
   fLabel667->SetMargins(0,0,0,0);
   fLabel667->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel667, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel667->MoveResize(4,138,152,16);
   noEvents = new TGNumberEntry(fMainFrame2284, (Double_t) 50000,27,-1,(TGNumberFormat::EStyle) 5);
   noEvents->SetName("noEvents");
   fMainFrame2284->AddFrame(noEvents, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   noEvents->MoveResize(168,136,208,20);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall672;
   vall672.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall672.fForeground);
   gClient->GetColorByName("#e8e8e8",vall672.fBackground);
   vall672.fFillStyle = kFillSolid;
   vall672.fFont = ufont->GetFontHandle();
   vall672.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall672, kTRUE);
   TGLabel *fLabel672 = new TGLabel(fMainFrame2284,"Report interval:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel672->SetTextJustify(33);
   fLabel672->SetMargins(0,0,0,0);
   fLabel672->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel672, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel672->MoveResize(4,162,152,16);
   reportInterval = new TGNumberEntry(fMainFrame2284, (Double_t) 1000,27,-1,(TGNumberFormat::EStyle) 5);
   reportInterval->SetName("reportInterval");
   fMainFrame2284->AddFrame(reportInterval, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   reportInterval->MoveResize(168,160,208,20);
   rndSeed = new TGNumberEntry(fMainFrame2284, (Double_t) 321,27,-1,(TGNumberFormat::EStyle) 5);
   rndSeed->SetName("rndSeed");
   fMainFrame2284->AddFrame(rndSeed, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   rndSeed->MoveResize(168,184,208,20);
   fCheckButton681 = new TGCheckButton(fMainFrame2284,"Multiple collisions in event");
   fCheckButton681->SetTextJustify(36);
   fCheckButton681->SetMargins(0,0,0,0);
   fCheckButton681->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fCheckButton681, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fCheckButton681->MoveResize(168,212,176,17);
   fCheckButton682 = new TGCheckButton(fMainFrame2284,"Single event persistance enabled");
   fCheckButton682->SetTextJustify(36);
   fCheckButton682->SetMargins(0,0,0,0);
   fCheckButton682->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fCheckButton682, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fCheckButton682->MoveResize(168,234,208,17);
   fCheckButton683 = new TGCheckButton(fMainFrame2284,"Simulate soft particles noise");
   fCheckButton683->SetTextJustify(36);
   fCheckButton683->SetMargins(0,0,0,0);
   fCheckButton683->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fCheckButton683, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fCheckButton683->MoveResize(168,256,208,17);
   fCheckButton684 = new TGCheckButton(fMainFrame2284,"Enable hit gaussian smearing");
   fCheckButton684->SetTextJustify(36);
   fCheckButton684->SetMargins(0,0,0,0);
   fCheckButton684->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fCheckButton684, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fCheckButton684->MoveResize(168,278,208,17);
   fCheckButton685 = new TGCheckButton(fMainFrame2284,"Hit cluster activation");
   fCheckButton685->SetTextJustify(36);
   fCheckButton685->SetMargins(0,0,0,0);
   fCheckButton685->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fCheckButton685, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fCheckButton685->MoveResize(168,301,208,17);

   // "Geometry parameters" group frame
   TGGroupFrame *fGroupFrame686 = new TGGroupFrame(fMainFrame2284,"Geometry parameters");
   fGroupFrame686->SetLayoutBroken(kTRUE);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall971;
   vall971.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall971.fForeground);
   gClient->GetColorByName("#e8e8e8",vall971.fBackground);
   vall971.fFillStyle = kFillSolid;
   vall971.fFont = ufont->GetFontHandle();
   vall971.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall971, kTRUE);
   TGLabel *fLabel971 = new TGLabel(fGroupFrame686,"Beam pipe radius (mm)",uGC->GetGC(),ufont->GetFontStruct());
   fLabel971->SetTextJustify(33);
   fLabel971->SetMargins(0,0,0,0);
   fLabel971->SetWrapLength(-1);
   fGroupFrame686->AddFrame(fLabel971, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel971->MoveResize(16,26,168,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall1189;
   vall1189.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall1189.fForeground);
   gClient->GetColorByName("#e8e8e8",vall1189.fBackground);
   vall1189.fFillStyle = kFillSolid;
   vall1189.fFont = ufont->GetFontHandle();
   vall1189.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall1189, kTRUE);
   TGLabel *fLabel1189 = new TGLabel(fGroupFrame686,"Beam pipe tickness (um)",uGC->GetGC(),ufont->GetFontStruct());
   fLabel1189->SetTextJustify(33);
   fLabel1189->SetMargins(0,0,0,0);
   fLabel1189->SetWrapLength(-1);
   fGroupFrame686->AddFrame(fLabel1189, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1189->MoveResize(16,50,168,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall1234;
   vall1234.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall1234.fForeground);
   gClient->GetColorByName("#e8e8e8",vall1234.fBackground);
   vall1234.fFillStyle = kFillSolid;
   vall1234.fFont = ufont->GetFontHandle();
   vall1234.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall1234, kTRUE);
   TGLabel *fLabel1234 = new TGLabel(fGroupFrame686,"Inner tracker radius (mm)",uGC->GetGC(),ufont->GetFontStruct());
   fLabel1234->SetTextJustify(33);
   fLabel1234->SetMargins(0,0,0,0);
   fLabel1234->SetWrapLength(-1);
   fGroupFrame686->AddFrame(fLabel1234, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1234->MoveResize(16,74,168,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall1259;
   vall1259.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall1259.fForeground);
   gClient->GetColorByName("#e8e8e8",vall1259.fBackground);
   vall1259.fFillStyle = kFillSolid;
   vall1259.fFont = ufont->GetFontHandle();
   vall1259.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall1259, kTRUE);
   TGLabel *fLabel1259 = new TGLabel(fGroupFrame686,"Inner tracker length (mm)",uGC->GetGC(),ufont->GetFontStruct());
   fLabel1259->SetTextJustify(33);
   fLabel1259->SetMargins(0,0,0,0);
   fLabel1259->SetWrapLength(-1);
   fGroupFrame686->AddFrame(fLabel1259, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1259->MoveResize(16,99,168,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall1300;
   vall1300.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall1300.fForeground);
   gClient->GetColorByName("#e8e8e8",vall1300.fBackground);
   vall1300.fFillStyle = kFillSolid;
   vall1300.fFont = ufont->GetFontHandle();
   vall1300.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall1300, kTRUE);
   TGLabel *fLabel1300 = new TGLabel(fGroupFrame686,"Outer tracker radius (mm)",uGC->GetGC(),ufont->GetFontStruct());
   fLabel1300->SetTextJustify(33);
   fLabel1300->SetMargins(0,0,0,0);
   fLabel1300->SetWrapLength(-1);
   fGroupFrame686->AddFrame(fLabel1300, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1300->MoveResize(16,123,168,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall1357;
   vall1357.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall1357.fForeground);
   gClient->GetColorByName("#e8e8e8",vall1357.fBackground);
   vall1357.fFillStyle = kFillSolid;
   vall1357.fFont = ufont->GetFontHandle();
   vall1357.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall1357, kTRUE);
   TGLabel *fLabel1357 = new TGLabel(fGroupFrame686,"Outer tracker length (mm)",uGC->GetGC(),ufont->GetFontStruct());
   fLabel1357->SetTextJustify(33);
   fLabel1357->SetMargins(0,0,0,0);
   fLabel1357->SetWrapLength(-1);
   fGroupFrame686->AddFrame(fLabel1357, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1357->MoveResize(16,147,168,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall1393;
   vall1393.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall1393.fForeground);
   gClient->GetColorByName("#e8e8e8",vall1393.fBackground);
   vall1393.fFillStyle = kFillSolid;
   vall1393.fFont = ufont->GetFontHandle();
   vall1393.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall1393, kTRUE);
   TGLabel *fLabel1393 = new TGLabel(fGroupFrame686,"Silicon tickness (um)",uGC->GetGC(),ufont->GetFontStruct());
   fLabel1393->SetTextJustify(33);
   fLabel1393->SetMargins(0,0,0,0);
   fLabel1393->SetWrapLength(-1);
   fGroupFrame686->AddFrame(fLabel1393, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1393->MoveResize(16,170,168,17);
   beamPipeTick = new TGNumberEntry(fGroupFrame686, (Double_t) 123,20,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame686->AddFrame(beamPipeTick, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   beamPipeTick->MoveResize(192,50,160,20);
   innerTRadius = new TGNumberEntry(fGroupFrame686, (Double_t) 123,20,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame686->AddFrame(innerTRadius, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   innerTRadius->MoveResize(192,74,160,20);
   innerTLength = new TGNumberEntry(fGroupFrame686, (Double_t) 123,20,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame686->AddFrame(innerTLength, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   innerTLength->MoveResize(192,98,160,20);
   outerTRadius = new TGNumberEntry(fGroupFrame686, (Double_t) 123,20,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame686->AddFrame(outerTRadius, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   outerTRadius->MoveResize(192,122,160,20);
   outerTLength = new TGNumberEntry(fGroupFrame686, (Double_t) 123,20,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame686->AddFrame(outerTLength, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   outerTLength->MoveResize(192,146,160,20);
   siliconTickness = new TGNumberEntry(fGroupFrame686, (Double_t) 121,20,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame686->AddFrame(siliconTickness, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   siliconTickness->MoveResize(192,170,160,20);
   beamPipeRadius = new TGNumberEntry(fGroupFrame686, (Double_t) 120,20,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame686->AddFrame(beamPipeRadius, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   beamPipeRadius->MoveResize(192,24,160,20);

   fGroupFrame686->SetLayoutManager(new TGVerticalLayout(fGroupFrame686));
   fGroupFrame686->Resize(374,288);
   fMainFrame2284->AddFrame(fGroupFrame686, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fGroupFrame686->MoveResize(10,336,374,288);

   // "Input distributions" group frame
   TGGroupFrame *fGroupFrame687 = new TGGroupFrame(fMainFrame2284,"Input distributions");
   fGroupFrame687->SetLayoutBroken(kTRUE);

   // list box
   selectPdfListBox = new TGListBox(fGroupFrame687,-1,kSunkenFrame);
   selectPdfListBox->AddEntry("TH1D - Uniform distribution between p0 and p1",1);
   selectPdfListBox->AddEntry("TH1D - Gaussian distribution with mu=p0 sigma=p1",2);
   selectPdfListBox->AddEntry("TH1D - Poisson distribution with mean=p0",3);
   selectPdfListBox->AddEntry("TH1D - Fixed value = p0",4);
   selectPdfListBox->AddEntry("TH2D - Uniform between X:p0,p1  Y:p2,p3",5);
   selectPdfListBox->AddEntry("TH2D - Gaussian with muX=p0, sigmaX=p1, muY=p2, sigmaY=p3",6);
   selectPdfListBox->AddEntry("TH2D - Fixed value X=p0  Y=p1",7);
   selectPdfListBox->AddEntry("Existing TObject inside the input .root file",8);
   selectPdfListBox->Resize(384,62);
   fGroupFrame687->AddFrame(selectPdfListBox, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   selectPdfListBox->MoveResize(16,42,384,62);
   TGLabel *fLabel1918 = new TGLabel(fGroupFrame687,"Select probability density function formula:");
   fLabel1918->SetTextJustify(36);
   fLabel1918->SetMargins(0,0,0,0);
   fLabel1918->SetWrapLength(-1);
   fGroupFrame687->AddFrame(fLabel1918, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1918->MoveResize(18,22,240,17);

   // "Parameters" group frame
   TGGroupFrame *fGroupFrame1956 = new TGGroupFrame(fGroupFrame687,"Parameters");
   fGroupFrame1956->SetLayoutBroken(kTRUE);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall1996;
   vall1996.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall1996.fForeground);
   gClient->GetColorByName("#e8e8e8",vall1996.fBackground);
   vall1996.fFillStyle = kFillSolid;
   vall1996.fFont = ufont->GetFontHandle();
   vall1996.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall1996, kTRUE);
   TGLabel *fLabel1996 = new TGLabel(fGroupFrame1956,"p0:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel1996->SetTextJustify(33);
   fLabel1996->SetMargins(0,0,0,0);
   fLabel1996->SetWrapLength(-1);
   fGroupFrame1956->AddFrame(fLabel1996, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel1996->MoveResize(16,24,48,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall2033;
   vall2033.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall2033.fForeground);
   gClient->GetColorByName("#e8e8e8",vall2033.fBackground);
   vall2033.fFillStyle = kFillSolid;
   vall2033.fFont = ufont->GetFontHandle();
   vall2033.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall2033, kTRUE);
   TGLabel *fLabel2033 = new TGLabel(fGroupFrame1956,"p1:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel2033->SetTextJustify(33);
   fLabel2033->SetMargins(0,0,0,0);
   fLabel2033->SetWrapLength(-1);
   fGroupFrame1956->AddFrame(fLabel2033, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel2033->MoveResize(16,49,48,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall2099;
   vall2099.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall2099.fForeground);
   gClient->GetColorByName("#e8e8e8",vall2099.fBackground);
   vall2099.fFillStyle = kFillSolid;
   vall2099.fFont = ufont->GetFontHandle();
   vall2099.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall2099, kTRUE);
   TGLabel *fLabel2099 = new TGLabel(fGroupFrame1956,"p2:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel2099->SetTextJustify(33);
   fLabel2099->SetMargins(0,0,0,0);
   fLabel2099->SetWrapLength(-1);
   fGroupFrame1956->AddFrame(fLabel2099, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel2099->MoveResize(16,74,48,17);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall2132;
   vall2132.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall2132.fForeground);
   gClient->GetColorByName("#e8e8e8",vall2132.fBackground);
   vall2132.fFillStyle = kFillSolid;
   vall2132.fFont = ufont->GetFontHandle();
   vall2132.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall2132, kTRUE);
   TGLabel *fLabel2132 = new TGLabel(fGroupFrame1956,"p3:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel2132->SetTextJustify(33);
   fLabel2132->SetMargins(0,0,0,0);
   fLabel2132->SetWrapLength(-1);
   fGroupFrame1956->AddFrame(fLabel2132, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel2132->MoveResize(16,97,48,17);
   par0 = new TGNumberEntry(fGroupFrame1956, (Double_t) 0,40,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame1956->AddFrame(par0, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   par0->MoveResize(72,24,296,21);
   par1 = new TGNumberEntry(fGroupFrame1956, (Double_t) 0,40,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame1956->AddFrame(par1, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   par1->MoveResize(72,48,296,21);
   par2 = new TGNumberEntry(fGroupFrame1956, (Double_t) 0,40,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame1956->AddFrame(par2, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   par2->MoveResize(72,72,295,21);
   par3 = new TGNumberEntry(fGroupFrame1956, (Double_t) 0,40,-1,(TGNumberFormat::EStyle) 5);
   fGroupFrame1956->AddFrame(par3, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   par3->MoveResize(72,96,295,21);

   fGroupFrame1956->SetLayoutManager(new TGVerticalLayout(fGroupFrame1956));
   fGroupFrame1956->Resize(384,136);
   fGroupFrame687->AddFrame(fGroupFrame1956, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fGroupFrame1956->MoveResize(16,144,384,136);
   TGLabel *fLabel2386 = new TGLabel(fGroupFrame687,"Assign to an input distribution:");
   fLabel2386->SetTextJustify(36);
   fLabel2386->SetMargins(0,0,0,0);
   fLabel2386->SetWrapLength(-1);
   fGroupFrame687->AddFrame(fLabel2386, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel2386->MoveResize(16,288,184,17);

   // list box
   assignListBox = new TGListBox(fGroupFrame687,-1,kSunkenFrame);
   assignListBox->AddEntry("collisions per event distribution",1);
   assignListBox->AddEntry("momentum distribution",2);
   assignListBox->AddEntry("eta distribution",3);
   assignListBox->AddEntry("multiplicity distribution",4);
   assignListBox->AddEntry("phi distribution",5);
   assignListBox->AddEntry("bunch crossing X distribution",6);
   assignListBox->AddEntry("bunch crossing Y distribution",7);
   assignListBox->AddEntry("Z collision coordinate distribution",8);
   assignListBox->AddEntry("inner tracker noise map (2D)",9);
   assignListBox->AddEntry("outer tracker noise map (2D)",10);
   assignListBox->AddEntry("inner tracker noisy pixel number",11);
   assignListBox->AddEntry("outer tracker noisy pixel number",12);
   assignListBox->AddEntry("detector hit smearing (2D)",13);
   assignListBox->AddEntry("multiple pixel activation per hit distribution",14);
   assignListBox->Resize(373,62);
   fGroupFrame687->AddFrame(assignListBox, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   assignListBox->MoveResize(18,308,373,62);
   TGTextButton *plotPreviewButton = new TGTextButton(fGroupFrame687,"Plot (preview)",-1,TGTextButton::GetDefaultGC()(),TGTextButton::GetDefaultFontStruct(),kRaisedFrame);
   plotPreviewButton->SetTextJustify(36);
   plotPreviewButton->SetMargins(0,0,0,0);
   plotPreviewButton->SetWrapLength(-1);
   plotPreviewButton->Resize(99,23);
   fGroupFrame687->AddFrame(plotPreviewButton, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   plotPreviewButton->MoveResize(16,376,99,23);
   TGTextButton *assignButton = new TGTextButton(fGroupFrame687,"Assign",-1,TGTextButton::GetDefaultGC()(),TGTextButton::GetDefaultFontStruct(),kRaisedFrame);
   assignButton->SetTextJustify(36);
   assignButton->SetMargins(0,0,0,0);
   assignButton->SetWrapLength(-1);
   assignButton->Resize(272,23);
   fGroupFrame687->AddFrame(assignButton, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   assignButton->MoveResize(120,376,272,23);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall2544;
   vall2544.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall2544.fForeground);
   gClient->GetColorByName("#e8e8e8",vall2544.fBackground);
   vall2544.fFillStyle = kFillSolid;
   vall2544.fFont = ufont->GetFontHandle();
   vall2544.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall2544, kTRUE);
   TGLabel *fLabel2544 = new TGLabel(fGroupFrame687,"Choose name:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel2544->SetTextJustify(33);
   fLabel2544->SetMargins(0,0,0,0);
   fLabel2544->SetWrapLength(-1);
   fGroupFrame687->AddFrame(fLabel2544, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel2544->MoveResize(16,114,96,17);

   ufont = gClient->GetFont("-*-helvetica-medium-r-*-*-12-*-*-*-*-*-iso8859-1");

   // graphics context changes
   GCValues_t valeDistName;
   valeDistName.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",valeDistName.fForeground);
   gClient->GetColorByName("#e8e8e8",valeDistName.fBackground);
   valeDistName.fFillStyle = kFillSolid;
   valeDistName.fFont = ufont->GetFontHandle();
   valeDistName.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&valeDistName, kTRUE);
   chooseDistName = new TGTextEntry(fGroupFrame687, new TGTextBuffer(14),-1,uGC->GetGC(),ufont->GetFontStruct(),kSunkenFrame | kOwnBackground);
   chooseDistName->SetMaxLength(4096);
   chooseDistName->SetAlignment(kTextLeft);
   chooseDistName->SetText("<default>");
   chooseDistName->Resize(288,chooseDistName->GetDefaultHeight());
   fGroupFrame687->AddFrame(chooseDistName, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   chooseDistName->MoveResize(112,112,288,21);

   // embedded canvas
   previewCanvas = new TRootEmbeddedCanvas(0,fGroupFrame687,376,200,kSunkenFrame);
   Int_t wpreviewCanvas = previewCanvas->GetCanvasWindowId();
   TCanvas *c124 = new TCanvas("c124", 10, 10, wpreviewCanvas);
   previewCanvas->AdoptCanvas(c124);
   fGroupFrame687->AddFrame(previewCanvas, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   previewCanvas->MoveResize(16,408,376,200);

   fGroupFrame687->SetLayoutManager(new TGVerticalLayout(fGroupFrame687));
   fGroupFrame687->Resize(416,624);
   fMainFrame2284->AddFrame(fGroupFrame687, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fGroupFrame687->MoveResize(392,56,416,624);

   ufont = gClient->GetFont("-*-newspaper-medium-r-*-*-12-*-*-*-*-*-*-*");

   // graphics context changes
   GCValues_t vall881;
   vall881.fMask = kGCForeground | kGCBackground | kGCFillStyle | kGCFont | kGCGraphicsExposures;
   gClient->GetColorByName("#000000",vall881.fForeground);
   gClient->GetColorByName("#e8e8e8",vall881.fBackground);
   vall881.fFillStyle = kFillSolid;
   vall881.fFont = ufont->GetFontHandle();
   vall881.fGraphicsExposures = kFALSE;
   uGC = gClient->GetGC(&vall881, kTRUE);
   TGLabel *fLabel881 = new TGLabel(fMainFrame2284,"PRNG seed:",uGC->GetGC(),ufont->GetFontStruct());
   fLabel881->SetTextJustify(33);
   fLabel881->SetMargins(0,0,0,0);
   fLabel881->SetWrapLength(-1);
   fMainFrame2284->AddFrame(fLabel881, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   fLabel881->MoveResize(4,185,152,16);
   TGTextButton *writeButton = new TGTextButton(fMainFrame2284,"Write configuration and input files",-1,TGTextButton::GetDefaultGC()(),TGTextButton::GetDefaultFontStruct(),kRaisedFrame);
   writeButton->SetTextJustify(36);
   writeButton->SetMargins(0,0,0,0);
   writeButton->SetWrapLength(-1);
   writeButton->Resize(376,48);
   fMainFrame2284->AddFrame(writeButton, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   writeButton->MoveResize(8,624,376,48);
   TGTextButton *browseInputFileButton = new TGTextButton(fMainFrame2284,"Browse input file...",-1,TGTextButton::GetDefaultGC()(),TGTextButton::GetDefaultFontStruct(),kRaisedFrame);
   browseInputFileButton->SetTextJustify(36);
   browseInputFileButton->SetMargins(0,0,0,0);
   browseInputFileButton->SetWrapLength(-1);
   browseInputFileButton->Resize(136,40);
   fMainFrame2284->AddFrame(browseInputFileButton, new TGLayoutHints(kLHintsLeft | kLHintsTop,2,2,2,2));
   browseInputFileButton->MoveResize(16,272,136,40);

   fMainFrame3430->AddFrame(fMainFrame2284, new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
   fMainFrame2284->MoveResize(0,0,813,687);

   fMainFrame3430->SetMWMHints(kMWMDecorAll,
                        kMWMFuncAll,
                        kMWMInputModeless);
   fMainFrame3430->MapSubwindows();

   fMainFrame3430->Resize(fMainFrame3430->GetDefaultSize());
   fMainFrame3430->MapWindow();
   fMainFrame3430->Resize(827,691);
    
   //END OF THE CODE GENERATED BY THE TGuiBuilder
    
   //SIGNALS / SLOTS ASSIGN
   plotPreviewButton->Connect("Clicked()","simulationConfigForm",this,"plotPreview()");
   writeButton->Connect("Clicked()","simulationConfigForm",this,"writeOutputFile()");
   browseInputFileButton->Connect("Clicked()","simulationConfigForm",this,"openTBrowser()");
   assignButton->Connect("Clicked()","simulationConfigForm",this,"assign()");
}  